package alabast

import munit.FunSuite
import alabast.macros._
import Context._

class ExprSpec extends FunSuite:
  testEquals("show[0]")(zero.show, "zero")
  
  testAssert("compare[00]")(int + one > string + one)
  testAssert("compare[01]")(int + one < int + string)
  testAssert("compare[10]")(int + one > string)
  testAssert("compare[11]")(int + one > int)
  testAssert("compare[20]")(int > string + one)
  testAssert("compare[21]")(string < string + one)
  testAssert("compare[30]")(2 * int > 3 * string)
  testAssert("compare[31]")(3 * int > 2 * int)
  testAssert("compare[40]")(2 * int > string)
  testAssert("compare[41]")(2 * int > int)
  testAssert("compare[50]")(int > 2 * string)
  testAssert("compare[51]")(int < 2 * int)
  testAssert("compare[60]")(int * string > long * string)
  testAssert("compare[61]")(int * string < int * long)
  testAssert("compare[70]")(long * string < int)
  testAssert("compare[71]")(long * string > long)
  testAssert("compare[80]")(int > long * string)
  testAssert("compare[81]")(int < int * string)
  testAssert("compare[90]")((int ^ 2) > (string ^ 3))
  testAssert("compare[91]")((string ^ 2) < (string ^ 3))
  testAssert("compare[A0]")((string ^ 2) < int)
  testAssert("compare[A1]")((string ^2) > string)
  testAssert("compare[B0]")(string < (int ^ 2))
  testAssert("compare[B1]")(string < (string ^2))

  testEquals("+[00]")((zero + one).show, "one")
  testEquals("+[10]")((int + zero).show, "int")
  testEquals("+[20]")(((int + one) + (int + string)).show, "2 * int + string + one")
  testEquals("+[21]")(((int + one) + (string + one)).show, "int + string + 2 * one")
  testEquals("+[22]")(((string + one) + (int + string)).show, "int + 2 * string + one")
  testEquals("+[30]")(((int + one) + int).show, "2 * int + one")
  testEquals("+[31]")(((int + one) + string).show, "int + string + one")
  testEquals("+[32]")(((string + one) + int).show, "int + string + one")
  testEquals("+[40]")((string + (string + one)).show, "2 * string + one")
  testEquals("+[41]")((int + (string + one)).show, "int + string + one")
  testEquals("+[42]")((string + (int + one)).show, "int + string + one")
  testEquals("+[50]")((2 * string + string).show, "3 * string")
  testEquals("+[51]")((2 * string + one).show, "2 * string + one")
  testEquals("+[52]")((2 * string + int).show, "int + 2 * string")

  testEquals("*[00]")((zero * one).show, "zero")
  testEquals("*[10]")((one * zero).show, "zero")
  testEquals("*[20]")((one * int).show, "int")
  testEquals("*[30]")((int * one).show, "int")
  testEquals("*[40]")(((int + one) * int).show, "int^2 + int")
  testEquals("*[50]")((int * (int + one)).show, "int^2 + int")
  testEquals("*[60]")((2 * int * (2 * string)).show, "4 * int * string")
  testEquals("*[61]")((2 * string * (2 * int)).show, "4 * int * string")
  testEquals("*[70]")((2 * int * string).show, "2 * int * string")
  testEquals("*[71]")((2 * string * int).show, "2 * int * string")
  testEquals("*[80]")((int * (2 * string)).show, "2 * int * string")
  testEquals("*[81]")((string * (int + int)).show, "2 * int * string")
  testEquals("*[90]")(((int * string) * (int * long)).show, "int^2 * long * string")
  testEquals("*[91]")(((int * string) * (long * string)).show, "int * long * string^2")
  testEquals("*[92]")(((long * string) * (int * string)).show, "int * long * string^2")
  testEquals("*[A0]")(((int * string) * (int^2)).show, "int^3 * string")
  testEquals("*[A1]")(((int * string) * string).show, "int * string^2")
  testEquals("*[A2]")(((long * string) * int).show, "int * long * string")
  testEquals("*[B0]")(((int^2) * ((int^2) * string)).show, "int^4 * string")
  testEquals("*[B1]")((int * (long * string)).show, "int * long * string")
  testEquals("*[B2]")((string * (int * string)).show, "int * string^2")
  testEquals("*[C0]")((string * string).show, "string^2")
  testEquals("*[C1]")((string * int).show, "int * string")

  testEquals("^[00]")((zero^2).show, "zero")
  testEquals("^[10]")((one^3).show, "one")
  testEquals("^[20]")(((int + string)^2).show, "int^2 + 2 * int * string + string^2")
  testEquals("^[30]")(((2 * int)^3).show, "8 * int^3")
  testEquals("^[40]")(((int * string)^2).show, "int^2 * string^2")
  testEquals("^[50]")((int^2^3).show, "int^6")

  testEquals("subtract[00]")(one.expr.subtract(zero.expr).get.show, "one")
  testEquals("subtract[10]")((int + string).expr.subtract((2 * int + string).expr), None)
  testEquals("subtract[11]")((int + string).expr.subtract((int + one).expr), None)
  testEquals("subtract[12]")((int + string).expr.subtract((int + string).expr).get.show, "zero")
  testEquals("subtract[13]")((int + string + one).expr.subtract((int + string).expr).get.show, "one")
  testEquals("subtract[14]")((2 * int + string + one).expr.subtract((int + string).expr).get.show, "int + one")
  testEquals("subtract[15]")((int + string).expr.subtract((int + one).expr), None)
  testEquals("subtract[16]")((int + string + one).expr.subtract((string + one).expr).get.show, "int")
  testEquals("subtract[17]")((int + 2 * string + one).expr.subtract((string + one).expr).get.show, "int + string")
  testEquals("subtract[18]")((string + one).expr.subtract((int + string).expr), None)
  testEquals("subtract[20]")((int + string).expr.subtract((2 * int).expr), None)
  testEquals("subtract[21]")((int + string).expr.subtract(int.expr).get.show, "string")
  testEquals("subtract[22]")((2 * int + string).expr.subtract(int.expr).get.show, "int + string")
  testEquals("subtract[23]")((int + string).expr.subtract(one.expr), None)
  testEquals("subtract[24]")((int + string).expr.subtract(string.expr).get.show, "int")
  testEquals("subtract[25]")((int + string + one).expr.subtract(string.expr).get.show, "int + one")
  testEquals("subtract[26]")((string + one).expr.subtract(int.expr), None)
  testEquals("subtract[30]")(string.expr.subtract(string.expr).get.show, "zero")
  testEquals("subtract[31]")((2 * string).expr.subtract(string.expr).get.show, "string")
  testEquals("subtract[32]")((4 * string).expr.subtract((2 * string).expr).get.show, "2 * string")
  testEquals("subtract[33]")(string.expr.subtract(int.expr), None)

  // testEquals("factor[00]")(zero.expr.factor(int.expr).get.show, "zero")
  // testEquals("factor[10]")(int.expr.factor(one.expr).get.show, "int")
  // testEquals("factor[20]")((string + one).expr.factor((int + string).expr), None)
  // testEquals("factor[21]")((int * string + one).expr.factor((int + one).expr), None)
  // testEquals("factor[22]")((int * string + string + one).expr.factor((int + one).expr), None)
  // testEquals("factor[23]")((int * string + string).expr.factor((int + one).expr).get.show, "string")
  // testEquals("factor[24]")((int * string + int + string + one).expr.factor((int + one).expr).get.show, "string + one")

  testEquals("asProduct[00]")(zero.asProduct(int).get.snd.show, "zero")
  testEquals("asProduct[10]")(int.asProduct(one).get.snd.show, "int")
  testEquals("asProduct[20]")((string + one).asProduct(int + string), None)
  testEquals("asProduct[21]")((int * string + one).asProduct(int + one), None)
  testEquals("asProduct[22]")((int * string + string + one).asProduct(int + one), None)
  testEquals("asProduct[23]")((int * string + string).asProduct(int + one).get.snd.show, "string")
  testEquals("asProduct[24]")((int * string + int + string + one).asProduct(int + one).get.snd.show, "string + one")
  testEquals("asProduct[30]")((int + one).asProduct(string), None)
  testEquals("asProduct[31]")((int + string).asProduct(int), None)
  testEquals("asProduct[32]")((int * string + int).asProduct(int).get.snd.show, "string + one")
  testEquals("asProduct[40]")(int.asProduct(int + one), None)
  testEquals("asProduct[50]")((4 * int).asProduct(2 * string), None)
  testEquals("asProduct[51]")((2 * int * string).asProduct(2 * int).get.snd.show, "string")
  testEquals("asProduct[52]")((4 * int * string).asProduct(2 * int).get.snd.show, "2 * string")
  testEquals("asProduct[53]")((3 * int).asProduct(2 * int), None)
  testEquals("asProduct[60]")((3 * int).asProduct(string), None)
  testEquals("asProduct[61]")((3 * int).asProduct(int).get.snd.show, "3 * one")
  testEquals("asProduct[70]")(int.asProduct(3 * int), None)
  testEquals("asProduct[80]")((int * string).asProduct((int^2) * long), None)
  testEquals("asProduct[81]")((int * string).asProduct(int * long), None)
  testEquals("asProduct[82]")((int * (string^2)).asProduct(int * string).get.snd.show, "string")
  testEquals("asProduct[83]")(((int^2) * string).asProduct(int * string).get.snd.show, "int")
  testEquals("asProduct[84]")(((int^2) * long * string).asProduct(int * string).get.snd.show, "int * long")
  testEquals("asProduct[85]")((int * string).asProduct(long * string), None)
  testEquals("asProduct[86]")((int * string * string).asProduct(string * string).get.snd.show, "int")
  testEquals("asProduct[87]")((long * string).asProduct(int), None) 
  testEquals("asProduct[90]")((int * string).asProduct(int).get.snd.show, "string")
  testEquals("asProduct[91]")(((int^2) * string).asProduct(int).get.snd.show, "int * string")
  testEquals("asProduct[92]")((int * long).asProduct(string), None)
  testEquals("asProduct[93]")((int * string).asProduct(string).get.snd.show, "int")
  testEquals("asProduct[A0]")(int.asProduct(int * string), None)
  testEquals("asProduct[B0]")((int^3).asProduct(int^3).get.snd.show, "one")
  testEquals("asProduct[B1]")((int^3).asProduct(int^2).get.snd.show, "int")
  testEquals("asProduct[B2]")((int^3).asProduct(int).get.snd.show, "int^2")
  testEquals("asProduct[B3]")((int^2).asProduct(int^3), None)

